// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	contractTblFieldNames          = builder.RawFieldNames(&ContractTbl{})
	contractTblRows                = strings.Join(contractTblFieldNames, ",")
	contractTblRowsExpectAutoSet   = strings.Join(stringx.Remove(contractTblFieldNames), ",")
	contractTblRowsWithPlaceHolder = strings.Join(stringx.Remove(contractTblFieldNames, "`id`"), "=?,") + "=?"
)

type (
	contractTblModel interface {
		Insert(ctx context.Context, data *ContractTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ContractTbl, error)
		Update(ctx context.Context, data *ContractTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultContractTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ContractTbl struct {
		Id            int64          `db:"id"`
		Code          sql.NullString `db:"code"`
		Status        sql.NullInt64  `db:"status"`
		RenterId      sql.NullInt64  `db:"renter_id"`
		RenterNumber  sql.NullString `db:"renter_number"`
		RenterDate    sql.NullInt64  `db:"renter_date"`
		RenterAddress sql.NullString `db:"renter_address"`
		RenterName    sql.NullString `db:"renter_name"`
		LessorId      sql.NullInt64  `db:"lessor_id"`
		LessorNumber  sql.NullString `db:"lessor_number"`
		LessorDate    sql.NullInt64  `db:"lessor_date"`
		LessorAddress sql.NullString `db:"lessor_address"`
		LessorName    sql.NullString `db:"lessor_name"`
		RoomId        sql.NullInt64  `db:"room_id"`
		CheckIn       sql.NullInt64  `db:"check_in"`
		Duration      sql.NullInt64  `db:"duration"`
		Purpose       sql.NullString `db:"purpose"`
		CreatedAt     sql.NullInt64  `db:"created_at"`
		UpdatedAt     sql.NullInt64  `db:"updated_at"`
		CreatedBy     sql.NullInt64  `db:"created_by"`
		UpdatedBy     sql.NullInt64  `db:"updated_by"`
	}
)

func newContractTblModel(conn sqlx.SqlConn) *defaultContractTblModel {
	return &defaultContractTblModel{
		conn:  conn,
		table: "`contract_tbl`",
	}
}

func (m *defaultContractTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultContractTblModel) FindOne(ctx context.Context, id int64) (*ContractTbl, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", contractTblRows, m.table)
	var resp ContractTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultContractTblModel) Insert(ctx context.Context, data *ContractTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, contractTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Code, data.Status, data.RenterId, data.RenterNumber, data.RenterDate, data.RenterAddress, data.RenterName, data.LessorId, data.LessorNumber, data.LessorDate, data.LessorAddress, data.LessorName, data.RoomId, data.CheckIn, data.Duration, data.Purpose, data.CreatedAt, data.UpdatedAt, data.CreatedBy, data.UpdatedBy)
	return ret, err
}

func (m *defaultContractTblModel) Update(ctx context.Context, data *ContractTbl) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, contractTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Code, data.Status, data.RenterId, data.RenterNumber, data.RenterDate, data.RenterAddress, data.RenterName, data.LessorId, data.LessorNumber, data.LessorDate, data.LessorAddress, data.LessorName, data.RoomId, data.CheckIn, data.Duration, data.Purpose, data.CreatedAt, data.UpdatedAt, data.CreatedBy, data.UpdatedBy, data.Id)
	return err
}

func (m *defaultContractTblModel) tableName() string {
	return m.table
}
