// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	paymentRenterTblFieldNames          = builder.RawFieldNames(&PaymentRenterTbl{})
	paymentRenterTblRows                = strings.Join(paymentRenterTblFieldNames, ",")
	paymentRenterTblRowsExpectAutoSet   = strings.Join(stringx.Remove(paymentRenterTblFieldNames), ",")
	paymentRenterTblRowsWithPlaceHolder = strings.Join(stringx.Remove(paymentRenterTblFieldNames, "`id`"), "=?,") + "=?"
)

type (
	paymentRenterTblModel interface {
		Insert(ctx context.Context, data *PaymentRenterTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PaymentRenterTbl, error)
		Update(ctx context.Context, data *PaymentRenterTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPaymentRenterTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PaymentRenterTbl struct {
		Id        int64         `db:"id"`
		PaymentId sql.NullInt64 `db:"payment_id"`
		UserId    sql.NullInt64 `db:"user_id"`
	}
)

func newPaymentRenterTblModel(conn sqlx.SqlConn) *defaultPaymentRenterTblModel {
	return &defaultPaymentRenterTblModel{
		conn:  conn,
		table: "`payment_renter_tbl`",
	}
}

func (m *defaultPaymentRenterTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPaymentRenterTblModel) FindOne(ctx context.Context, id int64) (*PaymentRenterTbl, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", paymentRenterTblRows, m.table)
	var resp PaymentRenterTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaymentRenterTblModel) Insert(ctx context.Context, data *PaymentRenterTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, paymentRenterTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.PaymentId, data.UserId)
	return ret, err
}

func (m *defaultPaymentRenterTblModel) Update(ctx context.Context, data *PaymentRenterTbl) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, paymentRenterTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.PaymentId, data.UserId, data.Id)
	return err
}

func (m *defaultPaymentRenterTblModel) tableName() string {
	return m.table
}
