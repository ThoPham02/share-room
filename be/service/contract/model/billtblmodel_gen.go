// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	billTblFieldNames          = builder.RawFieldNames(&BillTbl{})
	billTblRows                = strings.Join(billTblFieldNames, ",")
	billTblRowsExpectAutoSet   = strings.Join(stringx.Remove(billTblFieldNames), ",")
	billTblRowsWithPlaceHolder = strings.Join(stringx.Remove(billTblFieldNames, "`id`"), "=?,") + "=?"
)

type (
	billTblModel interface {
		Insert(ctx context.Context, data *BillTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BillTbl, error)
		Update(ctx context.Context, data *BillTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBillTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BillTbl struct {
		Id          int64          `db:"id"`
		Title       sql.NullString `db:"title"`
		PaymentId   int64          `db:"payment_id"`
		PaymentDate sql.NullInt64  `db:"payment_date"`
		Amount      int64          `db:"amount"`
		Discount    sql.NullInt64  `db:"discount"`
		Remain      int64          `db:"remain"`
		Status      int64          `db:"status"`
	}
)

func newBillTblModel(conn sqlx.SqlConn) *defaultBillTblModel {
	return &defaultBillTblModel{
		conn:  conn,
		table: "`bill_tbl`",
	}
}

func (m *defaultBillTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBillTblModel) FindOne(ctx context.Context, id int64) (*BillTbl, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", billTblRows, m.table)
	var resp BillTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBillTblModel) Insert(ctx context.Context, data *BillTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, billTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Title, data.PaymentId, data.PaymentDate, data.Amount, data.Discount, data.Remain, data.Status)
	return ret, err
}

func (m *defaultBillTblModel) Update(ctx context.Context, data *BillTbl) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, billTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Title, data.PaymentId, data.PaymentDate, data.Amount, data.Discount, data.Remain, data.Status, data.Id)
	return err
}

func (m *defaultBillTblModel) tableName() string {
	return m.table
}
