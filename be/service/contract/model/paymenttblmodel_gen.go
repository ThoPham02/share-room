// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	paymentTblFieldNames          = builder.RawFieldNames(&PaymentTbl{})
	paymentTblRows                = strings.Join(paymentTblFieldNames, ",")
	paymentTblRowsExpectAutoSet   = strings.Join(stringx.Remove(paymentTblFieldNames), ",")
	paymentTblRowsWithPlaceHolder = strings.Join(stringx.Remove(paymentTblFieldNames, "`id`"), "=?,") + "=?"
)

type (
	paymentTblModel interface {
		Insert(ctx context.Context, data *PaymentTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PaymentTbl, error)
		Update(ctx context.Context, data *PaymentTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPaymentTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PaymentTbl struct {
		Id          int64 `db:"id"`
		ContractId  int64 `db:"contract_id"`
		Amount      int64 `db:"amount"`
		Discount    int64 `db:"discount"`
		Deposit     int64 `db:"deposit"`
		DepositDate int64 `db:"deposit_date"`
		NextBill    int64 `db:"next_bill"`
	}
)

func newPaymentTblModel(conn sqlx.SqlConn) *defaultPaymentTblModel {
	return &defaultPaymentTblModel{
		conn:  conn,
		table: "`payment_tbl`",
	}
}

func (m *defaultPaymentTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPaymentTblModel) FindOne(ctx context.Context, id int64) (*PaymentTbl, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", paymentTblRows, m.table)
	var resp PaymentTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaymentTblModel) Insert(ctx context.Context, data *PaymentTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, paymentTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ContractId, data.Amount, data.Discount, data.Deposit, data.DepositDate, data.NextBill)
	return ret, err
}

func (m *defaultPaymentTblModel) Update(ctx context.Context, data *PaymentTbl) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, paymentTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ContractId, data.Amount, data.Discount, data.Deposit, data.DepositDate, data.NextBill, data.Id)
	return err
}

func (m *defaultPaymentTblModel) tableName() string {
	return m.table
}
