// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	houseTblFieldNames          = builder.RawFieldNames(&HouseTbl{})
	houseTblRows                = strings.Join(houseTblFieldNames, ",")
	houseTblRowsExpectAutoSet   = strings.Join(stringx.Remove(houseTblFieldNames), ",")
	houseTblRowsWithPlaceHolder = strings.Join(stringx.Remove(houseTblFieldNames, "`id`"), "=?,") + "=?"
)

type (
	houseTblModel interface {
		Insert(ctx context.Context, data *HouseTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*HouseTbl, error)
		Update(ctx context.Context, data *HouseTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultHouseTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	HouseTbl struct {
		Id          int64          `db:"id"`
		UserId      int64          `db:"user_id"`
		Name        sql.NullString `db:"name"`
		Description sql.NullString `db:"description"`
		Type        int64          `db:"type"`
		Area        int64          `db:"area"`
		Price       int64          `db:"price"`
		Status      int64          `db:"status"`
		BedNum      sql.NullInt64  `db:"bed_num"`
		LivingNum   sql.NullInt64  `db:"living_num"`
		Address     sql.NullString `db:"address"`
		WardId      int64          `db:"ward_id"`
		DistrictId  int64          `db:"district_id"`
		ProvinceId  int64          `db:"province_id"`
		CreatedAt   sql.NullInt64  `db:"created_at"`
		UpdatedAt   sql.NullInt64  `db:"updated_at"`
		CreatedBy   sql.NullInt64  `db:"created_by"`
		UpdatedBy   sql.NullInt64  `db:"updated_by"`
	}
)

func newHouseTblModel(conn sqlx.SqlConn) *defaultHouseTblModel {
	return &defaultHouseTblModel{
		conn:  conn,
		table: "`house_tbl`",
	}
}

func (m *defaultHouseTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultHouseTblModel) FindOne(ctx context.Context, id int64) (*HouseTbl, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", houseTblRows, m.table)
	var resp HouseTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHouseTblModel) Insert(ctx context.Context, data *HouseTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, houseTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.UserId, data.Name, data.Description, data.Type, data.Area, data.Price, data.Status, data.BedNum, data.LivingNum, data.Address, data.WardId, data.DistrictId, data.ProvinceId, data.CreatedAt, data.UpdatedAt, data.CreatedBy, data.UpdatedBy)
	return ret, err
}

func (m *defaultHouseTblModel) Update(ctx context.Context, data *HouseTbl) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, houseTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Name, data.Description, data.Type, data.Area, data.Price, data.Status, data.BedNum, data.LivingNum, data.Address, data.WardId, data.DistrictId, data.ProvinceId, data.CreatedAt, data.UpdatedAt, data.CreatedBy, data.UpdatedBy, data.Id)
	return err
}

func (m *defaultHouseTblModel) tableName() string {
	return m.table
}
