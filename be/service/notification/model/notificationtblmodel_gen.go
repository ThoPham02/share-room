// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	notificationTblFieldNames          = builder.RawFieldNames(&NotificationTbl{})
	notificationTblRows                = strings.Join(notificationTblFieldNames, ",")
	notificationTblRowsExpectAutoSet   = strings.Join(stringx.Remove(notificationTblFieldNames), ",")
	notificationTblRowsWithPlaceHolder = strings.Join(stringx.Remove(notificationTblFieldNames, "`id`"), "=?,") + "=?"
)

type (
	notificationTblModel interface {
		Insert(ctx context.Context, data *NotificationTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*NotificationTbl, error)
		Update(ctx context.Context, data *NotificationTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultNotificationTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	NotificationTbl struct {
		Id          int64  `db:"id"`
		Sender      int64  `db:"sender"`
		Receiver    int64  `db:"receiver"`
		RefId       int64  `db:"ref_id"`
		RefType     int64  `db:"ref_type"`
		Title       string `db:"title"`
		Description string `db:"description"`
		Priority    int64  `db:"priority"`
		DueDate     int64  `db:"due_date"`
		Status      int64  `db:"status"`
		Unread      int64  `db:"unread"`
		CreatedAt   int64  `db:"created_at"`
	}
)

func newNotificationTblModel(conn sqlx.SqlConn) *defaultNotificationTblModel {
	return &defaultNotificationTblModel{
		conn:  conn,
		table: "`notification_tbl`",
	}
}

func (m *defaultNotificationTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultNotificationTblModel) FindOne(ctx context.Context, id int64) (*NotificationTbl, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", notificationTblRows, m.table)
	var resp NotificationTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNotificationTblModel) Insert(ctx context.Context, data *NotificationTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, notificationTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Sender, data.Receiver, data.RefId, data.RefType, data.Title, data.Description, data.Priority, data.DueDate, data.Status, data.Unread, data.CreatedAt)
	return ret, err
}

func (m *defaultNotificationTblModel) Update(ctx context.Context, data *NotificationTbl) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, notificationTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Sender, data.Receiver, data.RefId, data.RefType, data.Title, data.Description, data.Priority, data.DueDate, data.Status, data.Unread, data.CreatedAt, data.Id)
	return err
}

func (m *defaultNotificationTblModel) tableName() string {
	return m.table
}
